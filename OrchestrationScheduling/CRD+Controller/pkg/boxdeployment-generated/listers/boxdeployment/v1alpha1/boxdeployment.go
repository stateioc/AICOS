/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "cncos.io/box-controller/pkg/apis/boxdeployment/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BoxDeploymentLister helps list BoxDeployments.
// All objects returned here must be treated as read-only.
type BoxDeploymentLister interface {
	// List lists all BoxDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BoxDeployment, err error)
	// BoxDeployments returns an object that can list and get BoxDeployments.
	BoxDeployments(namespace string) BoxDeploymentNamespaceLister
	BoxDeploymentListerExpansion
}

// boxDeploymentLister implements the BoxDeploymentLister interface.
type boxDeploymentLister struct {
	indexer cache.Indexer
}

// NewBoxDeploymentLister returns a new BoxDeploymentLister.
func NewBoxDeploymentLister(indexer cache.Indexer) BoxDeploymentLister {
	return &boxDeploymentLister{indexer: indexer}
}

// List lists all BoxDeployments in the indexer.
func (s *boxDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.BoxDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BoxDeployment))
	})
	return ret, err
}

// BoxDeployments returns an object that can list and get BoxDeployments.
func (s *boxDeploymentLister) BoxDeployments(namespace string) BoxDeploymentNamespaceLister {
	return boxDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BoxDeploymentNamespaceLister helps list and get BoxDeployments.
// All objects returned here must be treated as read-only.
type BoxDeploymentNamespaceLister interface {
	// List lists all BoxDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BoxDeployment, err error)
	// Get retrieves the BoxDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BoxDeployment, error)
	BoxDeploymentNamespaceListerExpansion
}

// boxDeploymentNamespaceLister implements the BoxDeploymentNamespaceLister
// interface.
type boxDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BoxDeployments in the indexer for a given namespace.
func (s boxDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BoxDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BoxDeployment))
	})
	return ret, err
}

// Get retrieves the BoxDeployment from the indexer for a given namespace and name.
func (s boxDeploymentNamespaceLister) Get(name string) (*v1alpha1.BoxDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("boxdeployment"), name)
	}
	return obj.(*v1alpha1.BoxDeployment), nil
}
