/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "cncos.io/box-controller/pkg/apis/boxstatefulset/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BoxStatefulSetLister helps list BoxStatefulSets.
// All objects returned here must be treated as read-only.
type BoxStatefulSetLister interface {
	// List lists all BoxStatefulSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BoxStatefulSet, err error)
	// BoxStatefulSets returns an object that can list and get BoxStatefulSets.
	BoxStatefulSets(namespace string) BoxStatefulSetNamespaceLister
	BoxStatefulSetListerExpansion
}

// boxStatefulSetLister implements the BoxStatefulSetLister interface.
type boxStatefulSetLister struct {
	indexer cache.Indexer
}

// NewBoxStatefulSetLister returns a new BoxStatefulSetLister.
func NewBoxStatefulSetLister(indexer cache.Indexer) BoxStatefulSetLister {
	return &boxStatefulSetLister{indexer: indexer}
}

// List lists all BoxStatefulSets in the indexer.
func (s *boxStatefulSetLister) List(selector labels.Selector) (ret []*v1alpha1.BoxStatefulSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BoxStatefulSet))
	})
	return ret, err
}

// BoxStatefulSets returns an object that can list and get BoxStatefulSets.
func (s *boxStatefulSetLister) BoxStatefulSets(namespace string) BoxStatefulSetNamespaceLister {
	return boxStatefulSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BoxStatefulSetNamespaceLister helps list and get BoxStatefulSets.
// All objects returned here must be treated as read-only.
type BoxStatefulSetNamespaceLister interface {
	// List lists all BoxStatefulSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BoxStatefulSet, err error)
	// Get retrieves the BoxStatefulSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BoxStatefulSet, error)
	BoxStatefulSetNamespaceListerExpansion
}

// boxStatefulSetNamespaceLister implements the BoxStatefulSetNamespaceLister
// interface.
type boxStatefulSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BoxStatefulSets in the indexer for a given namespace.
func (s boxStatefulSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BoxStatefulSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BoxStatefulSet))
	})
	return ret, err
}

// Get retrieves the BoxStatefulSet from the indexer for a given namespace and name.
func (s boxStatefulSetNamespaceLister) Get(name string) (*v1alpha1.BoxStatefulSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("boxstatefulset"), name)
	}
	return obj.(*v1alpha1.BoxStatefulSet), nil
}
